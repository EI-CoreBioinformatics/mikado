import os

swissprot = "uniprot_sprot_plants.fasta"
swissprot_noat = "uniprot_sprot_plants.not_at.fasta"

DBs=[swissprot, swissprot_noat]
zipDBs=["{0}.gz".format(db) for db in DBs]

config = "scoring.json"

rule decompress:
     input:  zipDBs
     output: DBs
     shell: "gunzip {input}"

rule clean:
     output: zipDBs
     run:
        shell("rm -f ./*loci* ./*.fasta.n* ./*.fasta.p*")
	# for f in filter(lamdba x: os.path.exists(x), DBs):
	#    shell("gzip -f {f};")

rule mock:
     params:	prefix="mock"
     input: DBs, gff="mock.gff3"
     output: "mock.loci.gff3", "mock.loci.scores.tsv"
     shell: "python3 ../run_pipeline.py -sc --source {params.prefix} --json_conf {config} --cds {params.prefix}.bed --sub_out {params.prefix}.subloci.gff3 --mono_out {params.prefix}.monoloci.gff3 --locus_out {output[0]} {input.gff}"
     

