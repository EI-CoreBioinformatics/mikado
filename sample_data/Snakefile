import os
import sys
import glob
import itertools
import yaml
from Mikado.utilities import path_join
import Mikado.configuration.configurator
import subprocess
import gzip
from snakemake import logger as snake_logger

swissprot = "uniprot_sprot_plants.fasta"
swissprot_noat = "uniprot_sprot_plants.not_at.fasta"

DBs=[swissprot]
zipDBs=["{0}.gz".format(db) for db in DBs]

configname = "configuration.yaml"
if not os.path.exists(configname):
    command = "mikado configure --list list.txt --reference chr5.fas --mode permissive \
        --scoring plants.yaml --junctions junctions.bed -bt {swiss} {configname}".format(configname=configname, swiss=swissprot)
    snake_logger.info("Creating the configuration file")
    snake_logger.info(command)
    subprocess.call(command, shell=True)

loads = {"load": {}}
for program in ["tophat", "gmap", "star",
            "hisat", "samtools", "cufflinks",
            "trinity", "stringtie",
            "class", "transdecoder",
            "portcullis", "mikado", "blast"]:
            loads["load"][program] = "echo"
with open(configname, "at") as _:
     print(yaml.dump(loads), file=_)

config = Mikado.configuration.configurator.to_json(configname)
configfile: "configuration.yaml"

rule complete:
    input: "compare.stats", "compare_subloci.stats", "compare_input.stats"
    output: touch("finished.ok")

rule test_json:
    input: db=zipDBs, config=configname
    output: touch("{}.ok".format(configname)), "chr5.fas"
    run:
        __= Mikado.configuration.configurator.to_json(configname)
        subprocess.call("gunzip -c chr5.fas.gz > chr5.fas", shell=True)
        # shell("touch {output}")

rule prepare:
    input: "class.gtf", "cufflinks.gtf", "stringtie.gtf", "trinity.gff3", "mikado.bed", rules.test_json.output[0], rules.test_json.output[1]
    # log: config["prepare"]["files"]["log"]
    output: gtf="mikado_prepared.gtf", fasta="mikado_prepared.fasta"
    shell: "mikado prepare --json-conf configuration.yaml"

rule uncompress_blast:
    input: "{0}.gz".format(swissprot)
    output: swissprot
    shell:
      "gzip -dc {input} > {output}"

rule prepare_blast:
    input: rules.uncompress_blast.output
    output: "{}.pog".format(swissprot)
    log: "blast_prepare.log"
    shell:
       "makeblastdb -in {input} -dbtype prot -parse_seqids > {log}"

rule blast_complete:
    params:	prefix="mikado"
    input: rules.prepare.output, rules.prepare_blast.output
    output: xml="mikado.blast.xml.gz"
    threads: 10
    log: "blast.log"
    run:
        command = """blastx -num_threads {threads} -query {query} \
        -outfmt 5 -db {db} -evalue 0.000001 \
        -max_target_seqs 5""".format(threads=threads, query=rules.prepare.output.fasta,
                                             db=rules.uncompress_blast.output)
        gzip_command = "sed '/^$/d' | gzip -c - > {}".format(output.xml)
        log = open("{}".format(log), "wt")
        blastx = subprocess.Popen(command, shell=True, stderr=log, stdout=subprocess.PIPE)
        subprocess.call(gzip_command, shell=True, stdin=blastx.stdout)
        log.close()

rule serialise:
    input:
        xml=rules.blast_complete.output.xml,
        orfs="mikado.bed"
    log: config["serialise"]["files"]["log"]
    output: touch("serialised.ok")  #, config["db_settings"]["db"]
    threads: 10
    shell:
        """mikado serialise -p {threads} --json-conf {configname} --xml {input.xml} \
        --orfs {input.orfs} --blast_targets {swissprot} --force"""

rule pick:
    params: prefix="all"
    input: configuration=configname, gtf="mikado_prepared.gtf", check="serialised.ok"
    log: config["pick"]["files"]["log"]
    threads: 10
    output: "mikado.loci.gff3", "mikado.subloci.gff3"
    shell: "mikado pick --json-conf configuration.yaml -lv INFO --subloci_out mikado.subloci.gff3 -p {threads}"

rule compare:
    input: reference="reference.gff3", prediction="mikado.loci.gff3"
    output: "compare.stats", "compare.tmap", "compare.refmap"
    log: "compare.log"
    shell: """mikado compare -r {input[reference]} -p {input[prediction]} -o compare -l {log}"""
    
rule compare_input:
    input: reference="reference.gff3", prediction="mikado_prepared.gtf"
    output: "compare_input.stats", "compare_input.tmap", "compare_input.refmap"
    log: "compare_input.log"
    shell: """mikado compare -r {input[reference]} -p {input[prediction]} -o compare_input -l {log}"""

rule compare_subloci:
    input: reference="reference.gff3", prediction="mikado.subloci.gff3"
    output: "compare_subloci.stats", "compare_subloci.tmap", "compare_subloci.refmap"
    log: "compare_subloci.log"
    shell: """mikado compare -r {input[reference]} -p {input[prediction]} -o compare_subloci -l {log}"""

rule clean:
    run:
        for filename in itertools.chain(glob.glob("*.ok"), glob.glob("uniprot*.fasta.p*"),
                                    glob.glob("*midx"), glob.glob("*fai"),
                                    glob.glob("uniprot*fasta"), glob.glob("*loci*"),
                                    ["mikado_prepared.gtf", "mikado_prepared.fasta", "chr5.fas"],
                                    glob.glob("compare*"), glob.glob(config["db_settings"]["db"]),
                                    glob.glob("*.log"), glob.glob("*xml"), ["chr5.fas"],
                                    ["configuration.yaml"]):
            if os.path.exists(filename):
                os.remove(filename)

rule clean_crumbs:
    run:
        for filename in itertools.chain(["finished.ok"], glob.glob("mikado*loci*"),
                                        glob.glob("compare*")):
            if os.path.exists(filename):
                os.remove(filename)
