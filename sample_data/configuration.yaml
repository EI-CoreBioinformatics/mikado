multiprocessing_method: spawn
db_settings:
  #  Settings related to DB connection. Parameters:
  #  db: the DB to connect to. Required. Default: Mikado.py.db
  #  dbtype: Type of DB to use. Choices: sqlite, postgresql, mysql. Default: sqlite.
  #  dbhost: Host of the database. Unused if dbtype is sqlite. Default: localhost
  #  dbuser: DB user. Default: 
  #  dbpasswd: DB password for the user. Default: 
  #  dbport: Integer. It indicates the default port for the DB.
  db: mikado.db
  dbtype: sqlite
log_settings:
  #  Settings related to the logs. Keys:
  #  - sql_level: verbosity for SQL calls. Default: WARNING.
  #    In decreasing order: DEBUG, INFO, WARNING, ERROR, CRITICAL
  #  - log_level: verbosity. Default: WARNING.
  #    In decreasing order: DEBUG, INFO, WARNING, ERROR, CRITICAL
  log: mikado.log
  log_level: DEBUG
  sql_level: WARNING
pick:
  alternative_splicing:
    #  Parameters related to alternative splicing reporting.
    #  - report: whether to report at all or not the AS events.
    #  - min_cds_overlap: minimum overlap between the CDS of the primary transcript
    #  and any AS event. Default: 60%.
    #  - max_isoforms: Maximum number of isoforms per locus. 1 implies no AS reported.
    #  Default: 3
    max_isoforms: 3
    min_score_perc: 0.6
    report: true
    keep_retained_introns: false
    only_confirmed_introns: true
  chimera_split:
    #  Parameters related to the splitting of transcripts in the presence of
    #  two or more ORFs. Parameters:
    #  - execute: whether to split multi-ORF transcripts at all. Boolean.
    #  - blast_check: whether to use BLAST information to take a decision. See blast_params
    #  for details.
    #  - blast_params: Parameters related to which BLAST data we want to analyse.
    blast_check: true
    blast_params:
      #  Parameters for the BLAST check prior to splitting.
      #  - evalue: Minimum evalue for the whole hit. Default: 1e-6
      #  - leniency: One of STRINGENT, LENIENT, PERMISSIVE. Default: LENIENT
      #  - max_target_seqs: maximum number of hits to consider. Default: 3
      leniency: LENIENT
      min_overlap_duplication: 0.8
    execute: true
  output_format:
    source: test
    report_all_orfs: true
  files:
    #  Input and output files for Mikado pick.
    #  - gff: input GTF/GFF3 file. Default: mikado_prepared.gtf
    #  - loci_out: output GFF3 file from Mikado pick. Default: mikado.loci.gff3
    #  - subloci_out: optional GFF file with the intermediate subloci. Default: no
    #  output
    #  - monoloci_out: optional GFF file with the intermediate monoloci. Default:
    #  no output
    #  - log: log file for this step.
    input: mikado_prepared.gtf
    log: pick.log
    loci_out: mikado.loci.gff3
    subloci_out: mikado.subloci.gff3
    monoloci_out: mikado.monoloci.gff3
  run_options:
    #  Generic run options.
    #  - purge: boolean flag. If set, all loci where all transcripts have a score
    #  of 0 will be excluded
    #    from the output. Default: false
    #  - remove_overlapping_fragments: boolean flag. If set, fragments (defined as
    #  monoexonic loci
    #    classified as P,x,i or p compared to another locus, will be removed from
    #  the output.
    #  - procs: number of processes to use. Default: 1
    #  - preload: boolean flag. If set, the whole database will be preloaded into
    #  memory for faster access. Useful when
    #    using SQLite databases.
    preload: false
    procs: 5
    single_thread: true
    intron_range: [60, 900]
    flank: 1000
  scoring_file: plants.yaml # test.model
  source_score:
     st: 3
     tr: -1
     cuff: 0
     cl: 2
prepare:
  #  Options related to the input data preparation.
  #  - gff: array of GFF3/GTF files containing the predictions. Required.
  #  - fasta: genomic FASTA file. Required.
  #  - procs: Number of processes to use.
  #  - out: output GTF file
  #  - out_fasta: output transcript FASTA file
  #  - strand_specific: if set to True, transcripts will be assumed to be in the correct
  #  orientation, no strand flipping or removal
  #  - cache: whether to load the whole genome in memory or not.
  files:
    gff:
    - class.gtf
    - cufflinks.gtf
    - stringtie.gtf
    - trinity.gtf
    labels:
      - cl
      - cuff
      - st
      - tr
    out: mikado_prepared.gtf
    out_fasta: mikado_prepared.fasta
  procs: 5
  single: false
  strand_specific: false
reference:
  fasta: chr5.fas
  genome_fai: chr5.fas.fai
serialise:
  #  Options related to serialisation
  #  - force: whether to drop and reload everything into the DB
  #  - orfs: BED12 file(s) with the ORFs.
  #  - fai: genome 
  force: true
  files:
    orfs: [mikado.bed]
    junctions: [junctions.bed]
    blast_targets: uniprot_sprot_plants.fasta
    xml: [mikado.blast.xml]
  max_regression: 0
  single_thread: false
  procs: 2
